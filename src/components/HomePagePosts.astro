---
import { getCollection } from "astro:content";
import PaginatedPosts from "./PaginatedPosts.astro";

interface ItemData {
  draft?: boolean;
  pubDate: Date | string;
  title: string;
  updatedDate?: Date | string;
}

interface Item {
  data: ItemData;
}

const TOTAL_ENTRIES = 16;

const latestPosts = (await getCollection("writing")).filter(
  (post) => !post.data.draft
);
const lastStream = (await getCollection("stream")).filter(
  (item) => !item.data.draft
);
const antibookLibrary = await getCollection("antiLibrary");
const bookLibrary = await getCollection("book");
const creators = await getCollection("creator");
const filmLibrary = await getCollection("filmLibrary");
const lastProjects = await getCollection("project");
const lindyLibrary = await getCollection("lindy");
const nowItems = await getCollection("now");
const inspiration = await getCollection("inspiration");

const combination = [
  ...antibookLibrary,
  ...bookLibrary,
  ...creators,
  ...filmLibrary,
  ...lastProjects,
  ...lastStream,
  ...latestPosts,
  ...lindyLibrary,
  ...nowItems,
  ...inspiration,
]
  .filter((item: Item) => !item.data.draft)
  .sort((a: Item, b: Item) => {
    // If updated date exists, use that first, then use pubDate if not
    const aDate = a.data.updatedDate ? a.data.updatedDate : a.data.pubDate;
    const bDate = b.data.updatedDate ? b.data.updatedDate : b.data.pubDate;
    return new Date(bDate).valueOf() - new Date(aDate).valueOf();
  })
  .slice(0, TOTAL_ENTRIES);
---

<ul class="list-none sm:p-0 grid grid-cols-1 gap-4">
  <PaginatedPosts posts={combination} />
</ul>
<div class="flex justify-evenly items-center mt-6">
  <button
    disabled
    class="flex px-4 py-2 border-2 rounded-full text-slate-500 dark:text-slate-200"
  >
    Previous
  </button>
  <div>Page 1</div>
  <a
    href="/page/2"
    class="flex px-4 py-2 border-2 rounded-full hover:bg-purple-300 dark:hover:bg-purple-600 dark:text-slate-100"
  >
    Next
  </a>
</div>
