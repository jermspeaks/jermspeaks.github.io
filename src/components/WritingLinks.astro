---
interface Link {
  href: string;
  text: string;
}
export interface Props {
  items?: Link[];
}

const defaultLinks = [
  {
    href: "/blog",
    text: "All",
    exact: true,
  },
  {
    href: "/blog/newsletter",
    text: "Newsletter",
    exact: false,
  },
  {
    href: "/blog/essay",
    text: "Essay",
    exact: false,
  },
  {
    href: "/blog/learning",
    text: "Learning",
    exact: false,
  },
  {
    href: "/blog/archive",
    text: "Archive",
    exact: false,
  },
];
const { items = defaultLinks } = Astro.props;
const { pathname } = Astro.url;
const isActive = (href, exact) => {
  if (exact) {
    return href === pathname;
  }

  return href === pathname || href === pathname.replace(/^(\/\w*)\/?.*/, "$1");
};
---

<ul class="flex flex-wrap md:flex-nowrap gap-4 list-none m-0 p-0">
  {
    items.map((item) => (
      <li>
        {isActive(item.href, item.exact) ? (
          <a
            class="text-gray-700 dark:text-white dark:border-blue-500 border-solid border-b-2"
            href={item.href}
          >
            <button
              disabled
              class="border-solid border-blue-500 border-2 px-4 cursor-not-allowed dark:border-blue-300 bg-none flex justify-center p-1 text-blue-500 dark:text-blue-300"
            >
              {item.text}
            </button>
          </a>
        ) : (
          <a
            class="text-gray-700 hover:text-gray-900 dark:text-white dark:hover:text-gray-400"
            href={item.href}
          >
            <button class="border-solid border-slate-800 border-2 px-4 dark:border-slate-300 bg-none cursor-pointer flex justify-center p-1 text-black hover:text-gray-400 hover:border-gray-400 dark:text-white">
              {item.text}
            </button>
          </a>
        )}
      </li>
    ))
  }
</ul>
