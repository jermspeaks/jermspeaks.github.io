---
import { getCollection } from "astro:content";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import BaseBody from "../components/BaseBody.astro";
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import TitleHeading from "../components/TitleHeading.astro";
import writingImage from "../images/writing.png";
import { generateWritingListSchema } from "../utils/schemas";

type Props = {
  title?: string;
  currentTag?: string;
};

const topTags = ["popular", "newsletter", "archive"];

const posts = await getCollection("writing");
const streams = await getCollection("stream");
const collections = [...posts, ...streams];

// Get unique tags
const tags = new Set<string>();
const counts = new Map<string, number>();

collections.forEach((post) => {
  if (!post.data.draft && Array.isArray(post.data.tags)) {
    post.data.tags.forEach((tag: string) => {
      tags.add(tag);
      const currentCount = counts.get(tag) ?? 0;
      if (counts.has(tag)) {
        counts.set(tag, currentCount + 1);
      } else {
        counts.set(tag, 1);
      }
    });
  }
});

const tagList = Array.from(tags)
  .filter((tag) => !topTags.includes(tag))
  .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));

const { pathname } = Astro.url;
const isActive = (href: string): boolean => {
  let finalPathname = pathname;
  // if pathname ends with /, remove it
  if (pathname.endsWith("/")) {
    finalPathname = pathname.slice(0, -1);
  }

  return href === finalPathname;
};

// Convert tag to Pascal case
const toPascalCase = (tag: string): string => {
  return tag
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
};

const schema = posts.length > 0 ? generateWritingListSchema(posts) : null;

const { title = "Writing", currentTag } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      description={SITE_DESCRIPTION}
      imageAlt="Writing cover"
      srcImage={writingImage.src}
      title={title || SITE_TITLE}
    />
    {
      schema && (
        <script type="application/ld+json" set:html={JSON.stringify(schema)} />
      )
    }
  </head>
  <BaseBody>
    <Header />
    <main class="mx-auto">
      <TitleHeading>{title}</TitleHeading>
      <div class="grid grid-cols-1 md:grid-cols-12 gap-8 space-between">
        <div class="col-span-12 md:col-span-9">
          <slot />
        </div>
        <div class="col-span-12 md:block md:col-span-3">
          <ul class="flex flex-wrap gap-2 list-none m-0 p-0 print:hidden mb-4">
            {
              isActive("/blog") && (
                <li class="text-green-700 dark:text-green-300  border-blue-800 dark:border-blue-500 border-solid border-b-2">
                  All Posts
                </li>
              )
            }
            {
              !isActive("/blog") && (
                <li>
                  <a
                    class="hover:underline hover:text-purple-500 visited:text-amber-600 dark:visited:text-purple-300"
                    href="/blog"
                  >
                    All Posts
                  </a>
                </li>
              )
            }
            {
              topTags.map((tag) => {
                if (tag === currentTag) {
                  return (
                    <li class="text-green-700 dark:text-green-300  border-blue-800 dark:border-blue-500 border-solid border-b-2">
                      {toPascalCase(tag)}
                    </li>
                  );
                }
                return (
                  <li>
                    <a
                      class="dark:text-slate-100 hover:underline hover:text-purple-500 visited:text-amber-600 dark:visited:text-purple-300"
                      href={`/blog/tag/${tag}`}
                    >
                      {toPascalCase(tag)}
                    </a>
                  </li>
                );
              })
            }
          </ul>
          <details>
            <summary class="dark:text-slate-100">ðŸ”– Tags</summary>
            <ul class="flex flex-wrap gap-2 list-none m-0 p-0 print:hidden">
              {
                tagList.map((tag) => {
                  if (tag === currentTag) {
                    return (
                      <li class="text-green-700 dark:text-green-300  border-blue-800 dark:border-blue-500 border-solid border-b-2">
                        {toPascalCase(tag)}&nbsp;({counts.get(tag)})
                      </li>
                    );
                  }
                  return (
                    <li>
                      <a
                        class="dark:text-slate-100 hover:underline hover:text-purple-500 visited:text-amber-600 dark:visited:text-purple-300"
                        href={`/blog/tag/${tag}`}
                      >
                        {toPascalCase(tag)}&nbsp;({counts.get(tag)})
                      </a>
                    </li>
                  );
                })
              }
            </ul>
          </details>
        </div>
      </div>

      <Footer />
    </main>
  </BaseBody>
</html>
